// Build Configuration   //
// Daniel Carns Aug 2020 //

// Specifies whether binary files are copied during a build.
COPY_PHASE_STRIP = NO


// Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files
DEBUG_INFORMATION_FORMAT = dwarf


// When this setting is activated, the product will be built with options appropriate for
// running automated tests, such as making private interfaces accessible to the tests.
// This may result in tests running slower than they would without testability enabled.
ENABLE_TESTABILITY = YES


// Faster function calls for applications. Not appropriate for shared libraries, which
// need to be position-independent.
GCC_DYNAMIC_NO_PIC = NO



// Optimization Level
//
// -O0      compilation time (default)
// -O1      code size & execution time
// -O2      more code size and execution time
// -O3      even more code size and execution time
// -Os      code size only
// -Ofast   O3 wwith fast none accurate math calculations
GCC_OPTIMIZATION_LEVEL = 0



// Preprocessor Macros & Debugging Information
GCC_PREPROCESSOR_DEFINITIONS = DEBUG=1 $(inherited)
MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE



// Build Active Architecture Only
//
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.
ONLY_ACTIVE_ARCH = YES


// Always Search User Paths (Deprecated)
// For backwards compatibility reasons, this setting is enabled by default. Disabling it
// is strongly recommended.
ALWAYS_SEARCH_USER_PATHS = NO


// Misuse of 'nonnull'
// Check for misuses of `nonnull` parameter and return types.
CLANG_ANALYZER_NONNULL = YES


// Check for suspicious conversions of NSNumber and CFNumberRef
CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE


// C++ Language Dialect
//
// Choose a standard or non-standard C++ language dialect. Options include:
//
// * C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]
// * GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]
// * C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions.
// [-std=c++11]
// * GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
// [-std=gnu++11]
// * C++14: Accept the ISO C++ 2014 standard with amendments, but not GNU extensions.
// [-std=c++14]
// * GNU++14: Accept the ISO C++ 2014 standard with amendments and GNU extensions.
// [-std=gnu++14]
// * C++17: Accept the ISO C++ 2017 standard with amendments, but not GNU extensions.
// [-std=c++17]
// * GNU++17: Accept the ISO C++ 2017 standard with amendments and GNU extensions.
// [-std=gnu++17]
// * Compiler Default: Tells the compiler to use its default C++ language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU++98.)
CLANG_CXX_LANGUAGE_STANDARD = gnu++14



// C++ Standard Library
//
// Choose a version of the C++ standard library to use.
//
// * libstdc++: A traditional C++ standard library that works with GCC and Clang
// (default).
// * libc++: A highly optimized C++ standard library that works only with Clang, and is
// designed to support new C++11 features
CLANG_CXX_LIBRARY = libc++


// Enable Modules (C and Objective-C)
//
// Enables the use of modules for system APIs. System headers are imported as semantic
// modules instead of raw headers. This can result in faster builds and project indexing.
CLANG_ENABLE_MODULES = NO


// Objective-C Automatic Reference Counting
//
// Compiles reference-counted Objective-C code (when garbage collection is not enabled)
// to use Automatic Reference Counting. Code compiled using automated reference counting
// is compatible with other code (such as frameworks) compiled using either manual
// reference counting (for example, traditional `retain` and `release` messages) or
// automated reference counting. Using this mode is currently incompatible with compiling
// code to use Objective-C Garbage Collection.
CLANG_ENABLE_OBJC_ARC = YES


// Weak References in Manual Retain Release
//
// Compiles Objective-C code to enable weak references for code compiled with manual
// retain release (MRR) semantics.
CLANG_ENABLE_OBJC_WEAK = YES


// Duplicate Method Definitions
//
// Warn about declaring the same method more than once within the same `@interface`.
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES


// Block Capture of Autoreleasing
//
// Warn about block captures of implicitly autoreleasing parameters.
CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES


// Implicit Boolean Conversions
//
// Warn about implicit conversions to boolean values that are suspicious. For example,
// writing `if (foo)` where `foo` is the name a function will trigger a warning.
CLANG_WARN_BOOL_CONVERSION = YES


// Suspicious Commas
//
// Warn about suspicious uses of the comma operator.
CLANG_WARN_COMMA = YES


// Implicit Constant Conversions
//
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.
CLANG_WARN_CONSTANT_CONVERSION = YES


// Documentation Comments
//
// Warns about issues in documentation comments (`doxygen`-style) such as missing or
// incorrect documentation tags.
CLANG_WARN_DOCUMENTATION_COMMENTS = YES


// Empty Loop Bodies
//
// Warn about loop bodies that are suspiciously empty.
CLANG_WARN_EMPTY_BODY = YES


// Implicit Enum Conversions
//
// Warn about implicit conversions between different kinds of enum values. For example,
// this can catch issues when using the wrong enum flag as an argument to a function or
// method.
CLANG_WARN_ENUM_CONVERSION = YES


// Infinite Recursion
//
// Warn if all paths through a function call itself.
CLANG_WARN_INFINITE_RECURSION = YES


// Implicit Integer to Pointer Conversions
//
// Warn about implicit conversions between pointers and integers. For example, this can
// catch issues when one incorrectly intermixes using `NSNumber*`'s and raw integers.
CLANG_WARN_INT_CONVERSION = YES


// Implicit Non-Literal Null Conversions
//
// Warn about non-literal expressions that evaluate to zero being treated as a null
// pointer.
CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES


// Implicit retain of 'self' within blocks
//
// Warn about implicit retains of `self` within blocks, which can create a retain-cycle.
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES


// Range-based For Loops
//
// Warn about ranged-based for loops.
CLANG_WARN_RANGE_LOOP_ANALYSIS = YES


// Strict Prototypes
//
// Warn about non-prototype declarations.
CLANG_WARN_STRICT_PROTOTYPES = YES


// Suspicious Moves
//
// Warn about suspicious uses of `std::move`.
CLANG_WARN_SUSPICIOUS_MOVE = YES


// Unguarded availability
//
// Warn if an API that is newer than the deployment target is used without "if
// (@available(...))" guards.
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE


// Unreachable Code
//
// Warns about potentially unreachable code.
CLANG_WARN_UNREACHABLE_CODE = YES


// Code Signing Identity
//
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.
CODE_SIGN_IDENTITY = Mac Developer


// C Language Dialect
//
// Choose a standard or non-standard C language dialect.
//
// * ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are
// incompatible. [-ansi]
// Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but
// not the equivalent `\_\_asm\_\_`, `\_\_inline\_\_`, and `\_\_typeof\_\_` forms), and
// the `//` syntax for comments.
// This setting also enables trigraphs.
// * C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// * GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// * C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// * GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// * C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// * GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// * Compiler Default: Tells the compiler to use its default C language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)
GCC_C_LANGUAGE_STANDARD = gnu11


// No Common Blocks
//
// In C, allocate even uninitialized global variables in the data section of the object
// file, rather than generating them as common blocks. This has the effect that if the
// same variable is declared (without `extern`) in two different compilations, you will
// get an error when you link them.
GCC_NO_COMMON_BLOCKS = YES


// Implicit Conversion to 32 Bit Type
//
// Warn if a value is implicitly converted from a 64-bit type to a 32-bit type. This is a
// subset of the warnings provided by -Wconversion.
GCC_WARN_64_TO_32_BIT_CONVERSION = YES


// Mismatched Return Type
//
// Causes warnings to be emitted when a function with a defined return type (not `void`)
// contains a return statement without a return-value or when it does not contain any
// return statements. Also emits a warning when a function with a void return type tries
// to return a value.
GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR


// Undeclared Selector
//
// Warn if a `@selector(...)` expression referring to an undeclared selector is found. A
// selector is considered undeclared if no method with that name has been declared before
// the `@selector(...)` expression, either explicitly in an `@interface` or `@protocol`
// declaration, or implicitly in an `@implementation` section. This option always
// performs its checks as soon as a `@selector(...)` expression is found, while
// `-Wselector` only performs its checks in the final stage of compilation. This also
// enforces the coding style convention that methods and selectors must be declared
// before being used.
GCC_WARN_UNDECLARED_SELECTOR = YES


// Uninitialized Variables
//
// Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable
// is used without prior initialization.
//
// The compiler may not detect all cases where an automatic variable is initialized or
// all usage patterns that may lead to use prior to initialization. You can toggle
// between the normal uninitialized value checking or the more aggressive (conservative)
// checking, which finds more issues but the checking is much stricter.
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE


// Unused Functions
//
// Warn whenever a static function is declared but not defined or a noninline static
// function is unused.
GCC_WARN_UNUSED_FUNCTION = YES


// Unused Variables
//
// Warn whenever a local variable or nonconstant static variable is unused aside from its
// declaration.
GCC_WARN_UNUSED_VARIABLE = YES


// macOS Deployment Target
//
// Code will load on this and later versions of macOS. Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for `null`
// function pointers or specific system versions before calling newer APIs.
MACOSX_DEPLOYMENT_TARGET = 10.14


// Enable Fast Math
//
// Enable optimizations for floating-point arithmetic that may violate the IEEE 754
// standard and disable the high precision variant of math functions for single and half
// precision floating-point.
MTL_FAST_MATH = YES


// Base SDK
//
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.
SDKROOT = macosx


// Directory for Clang custom compiler
CC = /usr/local/opt/llvm/bin/clang


// Enable Modules (C and Objective-C)
//
// Enables the use of modules for system APIs. System headers are imported as semantic
// modules instead of raw headers. This can result in faster builds and project indexing.
CLANG_ENABLE_MODULES = NO


// Code Signing Style
//
// This setting specifies the method used to acquire and locate signing assets. Choose
// `Automatic` to let Xcode automatically create and update profiles, app IDs, and
// certificates. Choose `Manual` to create and update these yourself on the developer
// website.
CODE_SIGN_STYLE = Automatic


// Enable Index-While-Building Functionality
//
// Control whether the compiler should emit index data while building.
COMPILER_INDEX_STORE_ENABLE = NO


// Header Search Paths
//
// This is a list of paths to folders to be searched by the compiler for included or
// imported header files when compiling C, Objective-C, C++, or Objective-C++. Paths are
// delimited by whitespace, so any paths with spaces in them need to be properly quoted.
HEADER_SEARCH_PATHS = /usr/local/opt/llvm/lib/clang/10.0.1/include


// Library Search Paths
//
// This is a list of paths to folders to be searched by the linker for libraries used by
// the product. Paths are delimited by whitespace, so any paths with spaces in them need
// to be properly quoted.
LIBRARY_SEARCH_PATHS = /usr/local/opt/llvm/lib /usr/local/Cellar/llvm/10.0.1/lib


// Other C Flags
//
// Allows for XCode to use the -fopenmp flag by default when running this project
OTHER_CFLAGS = -fopenmp

// Product Name
//
// This is the basename of the product generated by the target.
PRODUCT_NAME = $(TARGET_NAME)
